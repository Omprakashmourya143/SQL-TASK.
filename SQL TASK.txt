-- Create the e-commerce database.

CREATE DATABASE ecommerce;

-- Select the e-commerce database.

USE ecommerce;

-- Create the customers table.

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,  
    name VARCHAR(255) NOT NULL,          
    email VARCHAR(255) UNIQUE NOT NULL,  
    address TEXT NOT NULL               
);

-- Create the products table.

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,  
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,       
    description TEXT                    
);

-- Create the orders table.

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,   
    customer_id INT,                     
    order_date DATE NOT NULL,             
    total_amount DECIMAL(10, 2) NOT NULL, 
    FOREIGN KEY (customer_id) REFERENCES customers(id) 
);

-- Create the order_items table.

CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,   
    order_id INT,                         
    product_id INT,                       
    quantity INT NOT NULL,                
    price DECIMAL(10, 2) NOT NULL,        
    FOREIGN KEY (order_id) REFERENCES orders(id),  
    FOREIGN KEY (product_id) REFERENCES products(id) 
);

-- Insert 10 customers.

INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john.doe@example.com', '123 Elm St, Springfield, IL'),
('Jane Smith', 'jane.smith@example.com', '456 Oak St, Springfield, IL'),
('Alice Johnson', 'alice.johnson@example.com', '789 Pine St, Springfield, IL'),
('Bob Brown', 'bob.brown@example.com', '101 Maple St, Springfield, IL'),
('Charlie Green', 'charlie.green@example.com', '202 Birch St, Springfield, IL'),
('Diana White', 'diana.white@example.com', '303 Cedar St, Springfield, IL'),
('Eva Black', 'eva.black@example.com', '404 Willow St, Springfield, IL'),
('Frank Blue', 'frank.blue@example.com', '505 Aspen St, Springfield, IL'),
('Grace Pink', 'grace.pink@example.com', '606 Elm St, Springfield, IL'),
('Hank Yellow', 'hank.yellow@example.com', '707 Oak St, Springfield, IL');

-- Insert 10 products.

INSERT INTO products (name, price, description) VALUES
('Product A', 50.00, 'Description for Product A'),
('Product B', 30.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C'),
('Product D', 60.00, 'Description for Product D'),
('Product E', 25.00, 'Description for Product E'),
('Product F', 75.00, 'Description for Product F'),
('Product G', 90.00, 'Description for Product G'),
('Product H', 15.00, 'Description for Product H'),
('Product I', 35.00, 'Description for Product I'),
('Product J', 55.00, 'Description for Product J');

-- Insert orders.

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-09-28', 120.00),   
(2, '2024-10-01', 150.00),   
(3, '2024-10-05', 200.00),  
(4, '2024-10-15', 170.00),   
(5, '2024-10-20', 140.00),   
(6, '2024-11-01', 250.00),   
(7, '2024-11-03', 100.00),   
(8, '2024-11-05', 210.00),   
(9, '2024-11-08', 180.00),  
(10, '2024-11-10', 130.00);  

-- Insert order items for the 10 orders.

INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 50.00),  
(1, 2, 1, 30.00),  
(2, 3, 3, 40.00),  
(2, 4, 1, 60.00),  
(3, 1, 1, 50.00),  
(3, 5, 2, 25.00),  
(4, 6, 1, 75.00),  
(4, 7, 2, 90.00),  
(5, 2, 3, 30.00),  
(5, 8, 1, 15.00);  


1. Retrieve all customers who have placed an order in the last 30 days:

SELECT DISTINCT c.name, c.email, c.address
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

   name	               email	          address
Bob Brown	    bob@example.com	101     Maple St
Charlie Davis	charlie@example.com	    202 Birch St
Eve White	    eve@example.com	303     Cedar St
Grace Green	    grace@example.com	    404 Redwood St
Hannah Black	hannah@example.com	    505 Elm St
Jack Blue	    jack@example.com	    606 Spruce St
Kathy Red	    kathy@example.com	    707 Willow St

2. Get the total amount of all orders placed by each customer.

SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;

name	        total_spent
John Doe	      120.00
Jane Smith	      150.00
Alice Johnson	  200.00
Bob Brown	      170.00
Charlie Green	  140.00
Diana White	      250.00
Eva Black	      100.00
Frank Blue	      210.00
Grace Pink	      180.00
Hank Yellow	      130.00

3. Update the price of Product C to 45.00.

UPDATE products
SET price = 45.00
WHERE name = 'Product C';

id	name	price	description	
1	Product A	50.00	Description for Product A	
2	Product B	30.00	Description for Product B	
3	Product C	45.00	Description for Product C	
4	Product D	60.00	Description for Product D	
5	Product E	25.00	Description for Product E	
6	Product F	75.00	Description for Product F	
7	Product G	90.00	Description for Product G	
8	Product H	15.00	Description for Product H	
9	Product I	35.00	Description for Product I	
10	Product J	55.00	Description for Product J	

4. Add a new column discount to the products table.

ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

id	name	price	description	discount	
1	Product A	50.00	Description for Product A	0.00	
2	Product B	30.00	Description for Product B	0.00	
3	Product C	45.00	Description for Product C	0.00	
4	Product D	60.00	Description for Product D	0.00	
5	Product E	25.00	Description for Product E	0.00	
6	Product F	75.00	Description for Product F	0.00	
7	Product G	90.00	Description for Product G	0.00	
8	Product H	15.00	Description for Product H	0.00	
9	Product I	35.00	Description for Product I	0.00	
10	Product J	55.00	Description for Product J	0.00	


5. Retrieve the top 3 products with the highest price.

SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3; 

  name	    price   	
Product G	90.00	
Product F	75.00	
Product D	60.00	


6. Get the names of customers who have ordered Product A.

SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

  name	
John Doe	
Alice Johnson	


7. Join the orders and customers tables to retrieve the customer's name and order date for each order.

SELECT c.name, o.order_date
FROM customers c
JOIN orders o ON c.id = o.customer_id;

name	order_date	
John Doe	2024-09-28	
Jane Smith	2024-10-01	
Alice Johnson	2024-10-05	
Bob Brown	2024-10-15	
Charlie Green	2024-10-20	
Diana White	2024-11-01	
Eva Black	2024-11-03	
Frank Blue	2024-11-05	
Grace Pink	2024-11-08	
Hank Yellow	2024-11-10	

8. Retrieve the orders with a total amount greater than 150.00.

SELECT o.id, o.total_amount
FROM orders o
WHERE o.total_amount > 150.00;

id	total_amount	
3	200.00	
4	170.00	
6	250.00	
8	210.00	
9	180.00	

9. Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.

-- we created the table in the beginning.

CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

10. Retrieve the average total of all orders.

SELECT AVG(total_amount) AS average_order_value
FROM orders;

  average_order_value
      165.000000	
